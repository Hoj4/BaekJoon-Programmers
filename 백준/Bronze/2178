// https://www.acmicpc.net/problem/2178
// 백준 2178.미로 탐색

import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class Main {
	
	static int[][] map;
	static int n;
	static int m;
	static boolean[][] visited;
	static int[] dx = { -1, 1, 0, 0 }; 
    static int[] dy = { 0, 0, -1, 1 };

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		n = sc.nextInt();
		m = sc.nextInt();
		sc.nextLine(); 
		
		map = new int[n][m];
		for(int i=0; i<n; i++) {
			String row = sc.nextLine();
			for(int j=0; j<m; j++) {
				map[i][j] = row.charAt(j) - '0';
			}
		}
		
		visited = new boolean[n][m];
		visited[0][0] = true;
		bfs(0, 0);
		System.out.println(map[n-1][m-1]);
		
		sc.close();
	}

	public static void bfs(int startX, int startY) {
		Queue<int[]> queue = new LinkedList<>();
		queue.add(new int[] {startX, startY});
		
		while(!queue.isEmpty()) {
			int[] current = queue.poll();
			int currentX = current[0];
			int currentY = current[1];
			
			for(int i=0; i<4; i++) {
				int nextX = currentX + dx[i];
				int nextY = currentY + dy[i];
				
                if (nextX < 0 || nextY < 0 || nextX >= n || nextY >= m)
                	continue;
                if (visited[nextX][nextY] || map[nextX][nextY] == 0)
                	continue;
                    
		        queue.add(new int[] {nextX, nextY});
		        map[nextX][nextY] = map[currentX][currentY] + 1;
		        visited[nextX][nextY] = true;
			}
		}
	}
}
